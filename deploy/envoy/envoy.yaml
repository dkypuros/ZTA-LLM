# Envoy Proxy Configuration for ZTA-LLM
# Layer 2: Service Mesh Security Impedance

admin:
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 8082
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              log_format:
                text_format: |
                  [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%"
                  %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT%
                  %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%"
                  "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%"
                  "%UPSTREAM_HOST%" %RESPONSE_CODE_DETAILS%
          
          http_filters:
          # Rate limiting filter
          - name: envoy.filters.http.local_ratelimit
            typed_config:
              "@type": type.googleapis.com/udpa.type.v1.TypedStruct
              type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
              value:
                stat_prefix: rate_limiter
                token_bucket:
                  max_tokens: 100
                  tokens_per_fill: 10
                  fill_interval: 1s
                filter_enabled:
                  runtime_key: rate_limit_enabled
                  default_value:
                    numerator: 100
                    denominator: HUNDRED
                filter_enforced:
                  runtime_key: rate_limit_enforced
                  default_value:
                    numerator: 100
                    denominator: HUNDRED
          
          # Security headers filter
          - name: envoy.filters.http.header_to_metadata
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.HeaderToMetadata
              request_rules:
              - header: x-request-id
                on_header_present:
                  metadata_namespace: envoy.common
                  key: request_id
                  type: STRING
              - header: user-agent
                on_header_present:
                  metadata_namespace: envoy.common
                  key: user_agent
                  type: STRING
          
          # OPA External Authorization Filter - Main Security Layer
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              transport_api_version: V3
              grpc_service:
                envoy_grpc:
                  cluster_name: opa_cluster
                timeout: 5s
              
              # Include request body for analysis
              with_request_body:
                max_request_bytes: 1048576  # 1MB max
                allow_partial_message: false
                pack_as_bytes: false
              
              # Failure mode - block on OPA failure
              failure_mode_allow: false
              
              # Include metadata in authorization request
              metadata_context_namespaces:
              - envoy.common
              
          # WAF-style content filter
          - name: envoy.filters.http.wasm
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
              config:
                name: "security_filter"
                root_id: "security_filter"
                vm_config:
                  vm_id: "security_filter"
                  runtime: "envoy.wasm.runtime.v8"
                  code:
                    local:
                      inline_string: |
                        class SecurityFilter {
                          constructor(rootContext) {
                            this.rootContext = rootContext;
                          }
                          
                          onRequestHeaders() {
                            // Add security headers
                            this.addRequestHeader("X-ZTA-Security-Layer", "envoy");
                            this.addRequestHeader("X-ZTA-Processing-Time", Date.now().toString());
                            return FilterHeadersStatus.Continue;
                          }
                          
                          onRequestBody() {
                            const body = this.getRequestBodyBuffer();
                            // Additional body validation could go here
                            return FilterDataStatus.Continue;
                          }
                          
                          onResponseHeaders() {
                            // Add security response headers
                            this.addResponseHeader("X-Content-Type-Options", "nosniff");
                            this.addResponseHeader("X-Frame-Options", "DENY");
                            this.addResponseHeader("X-XSS-Protection", "1; mode=block");
                            return FilterHeadersStatus.Continue;
                          }
                        }
          
          # CORS filter (restrict origins)
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
              
          # Router filter (must be last)
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              
              # Security response headers
              response_headers_to_add:
              - header:
                  key: "Strict-Transport-Security"
                  value: "max-age=31536000; includeSubDomains"
              - header:
                  key: "X-ZTA-Layer2-Validation"
                  value: "passed"
              
              routes:
              # Health check endpoint (bypass security)
              - match:
                  path: "/health"
                route:
                  cluster: security_wrapper_cluster
                
              # Main API routes (full security validation)
              - match:
                  prefix: "/api/v1/"
                route:
                  cluster: security_wrapper_cluster
                  timeout: 30s
                  retry_policy:
                    retry_on: "5xx"
                    num_retries: 2
                
              # Metrics endpoint (internal only)
              - match:
                  path: "/metrics"
                route:
                  cluster: security_wrapper_cluster
                request_headers_to_add:
                - header:
                    key: "X-Internal-Request"
                    value: "true"

  clusters:
  # OPA authorization service
  - name: opa_cluster
    connect_timeout: 5s
    type: LOGICAL_DNS
    http2_protocol_options: {}
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: opa_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: opa-server
                port_value: 8181
    
    # Health checking for OPA
    health_checks:
    - timeout: 5s
      interval: 10s
      no_traffic_interval: 10s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check:
        path: /health
        
  # Security wrapper service cluster
  - name: security_wrapper_cluster
    connect_timeout: 5s
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: security_wrapper_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: security-wrapper
                port_value: 8080
    
    # Circuit breaker for security wrapper
    circuit_breakers:
      thresholds:
      - priority: DEFAULT
        max_connections: 100
        max_pending_requests: 100
        max_requests: 100
        max_retries: 3
    
    # Health checking
    health_checks:
    - timeout: 5s
      interval: 30s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check:
        path: /health